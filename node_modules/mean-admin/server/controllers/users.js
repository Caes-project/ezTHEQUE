'use strict';

/**
 * Module dependencies.
 */
var mongoose = require('mongoose'),
  User = mongoose.model('User'),
  nodemailer = require('nodemailer'),
  templates = require('../../../../packages/users/server/template'),
  _ = require('lodash');

function sendMail(mailOptions) {
  var transport = nodemailer.createTransport('SMTP', config.mailer);
  transport.sendMail(mailOptions, function(err, response) {
    if (err) {
      console.log(err);
      return err;
    }
    console.log(response);
    return response;
  });
}


/**
 * Create user
 */
exports.create = function(req, res, next) {
  var user = new User(req.body);
  console.log(req.body.password);

  user.provider = 'local';

  // because we set our user.provider to local our models/user.js validation will always be true
  req.assert('email', 'Entrez une adresse mail valide').isEmail();
  req.assert('password', 'Votre mot de passe doit contenir entre 8 et 20 caractères').len(8, 20);
  req.assert('username', 'Votre username ne doit pas dépasser 20 caractères et avoir 3 caractères minimun').len(3, 20);
  req.assert('confirmPassword', 'Les mots de passe ne correspondent pas').equals(req.body.password);

  var errors = req.validationErrors();
  console.log(errors);
  if (errors) {
    return res.status(400).send(errors);
  } else {

    // Hard coded for now. Will address this with the user permissions system in v0.3.5
    //user.roles = ['authenticated'];
    user.roles = req.body.roles;
    user.save(function(err) {
      if (err) {
        console.log(err);
        res.jsonp(400, err);
        // switch (err.code) {
        //     case 11000:
        //     case 11001:
        //         res.status(400).send('Username already taken');
        //         break;
        //     default:
        //         res.status(400).send('Please fill all the required fields');
        // }

        // return res.status(400);
      } else {
        res.jsonp(user);
        var mailOptions = {
          to: user.email,
          from: config.emailFrom
        };
        mailOptions = templates.envoi_mdp(user, req.body.password, mailOptions);
        sendMail(mailOptions);
      }
    });
  }
};

/**
 * Find user by id
 */
exports.user = function(req, res, next, id) {
  User
    .findOne({
      _id: id
    })
    .exec(function(err, user) {
      if (err) return next(err);
      if (!user) return next(new Error('Failed to load User ' + id));
      req.profile = user;
      next();
    });
};
/**
 * Update a user
 */
exports.update = function(req, res) {
  var user = req.profile;
  user = _.extend(user, req.body);

  user.save(function(err) {
    if (err) {
      // return res.send(400, '/admin/users', {
      //     errors: err
      // });
      res.jsonp(400, err);
    } else {
      res.jsonp(user);
    }
  });
};

/**
 * load a user
 */
exports.me = function(req, res) {
  console.log('me');
  console.log(req.params);
  res.jsonp(req.user || null);
};

exports.findById = function(req, res) {
  // console.log(req.params);
  // console.log('findById');
  User.findOne({
    _id: req.params.userId
  })
    .exec(function(err, user) {
      if (err) {
        console.log(err);
      } else {
        res.jsonp(user);
      }
    });
}

/**
 * Delete an user
 */
exports.destroy = function(req, res) {
  var user = req.profile;

  user.remove(function(err) {
    if (err) {
      res.render('error', {
        status: 500
      });
    } else {
      res.jsonp(user);
    }
  });
};

/**
 * List of Users
 */
exports.all = function(req, res) {
  User.find(req.query).sort({
    $natural: 1
  }).populate('user', 'name username').exec(function(err, users) {
    if (err) {
      res.render('error', {
        status: 500
      });
    } else {
      res.jsonp(users);
    }
  });
};

exports.retard_moins_semaine = function(req, res) {
  var today = new Date();
  User.find({
    'emprunt.date_fin': {
      $lt: today
    }
  }).sort('-created').exec(function(err, users) {
    if (err) {
      res.render('error', {
        status: 500
      });
    } else {
      res.jsonp(users);
    }
  });
}