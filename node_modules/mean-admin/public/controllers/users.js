'use strict';

angular.module('mean').controller('UsersController', ['$scope', 'Global', 'Menus', '$rootScope', '$http', 'Users', '$filter', '$timeout',
  function($scope, Global, Menus, $rootScope, $http, Users, $filter, $timeout) {
    $scope.global = Global;
    $scope.loader = true;
    $scope.userSchema = [{
      title: 'Name',
      schemaKey: 'name',
      type: 'text',
      inTable: true,
      inForm : true
    }, {
      title: 'Email',
      schemaKey: 'email',
      type: 'text',
      inTable: true,
      inForm : true
    }, {
      title: 'Modifié le',
      schemaKey: 'date_maj',
      type: 'date',
      inTable: true,
      inForm : false
    }, {
      title: 'Livres, BD, Mag',
      schemaKey: 'livre_mag_revue',
      type: 'date',
      inTable: true,
      inForm : false
    }, {
      title: 'DVD',
      schemaKey: 'DVD',
      type: 'date',
      inTable: true,
      inForm : false
    }, {
      title: 'CD',
      schemaKey: 'CD',
      type: 'date',
      inTable: true,
      inForm : false
    }, {
      title: 'Caution',
      schemaKey: 'caution',
      type: 'date',
      inTable: true,
      inForm : false
    }, {
      title: 'Paiement',
      schemaKey: 'paiement',
      type: 'date',
      inTable: true,
      inForm : false
    }, {
      title: 'Password',
      schemaKey: 'password',
      type: 'password',
      inTable: false,
      inForm : true
    }, {
      title: 'Repeat password',
      schemaKey: 'confirmPassword',
      type: 'password',
      inTable: false,
      inForm : true
    }, {
      title: 'Roles',
      schemaKey: 'roles',
      type: 'select',
      options: ['authenticated', 'admin'],
      inTable: true,
      inForm : false
    }, {
      title: 'Username',
      schemaKey: 'username',
      type: 'text',
      inTable: true,
      inForm : true
    }];
    $scope.user = {};
    $scope.option_abo = [{'name' : 'BD, Livres, Magazines'},{'name' : 'Disque'}, {'name' : 'DVD'}];
    $scope.option_role = [ {'name' :'admin'}];
    // $scope.abo_select = {};
    // $scope.abo_select = {abos: []};

    $scope.selectedAbo = function () {
      $scope.abo_select = $filter('filter')($scope.option_abo, {checked: true});
    }

    $scope.selectedRole = function () {
      $scope.role_select = $filter('filter')($scope.option_role, {checked: true});
    }

    $scope.pagination = function(){
      $scope.pagina_min=0;
      $scope.pagina_max=10;
    }

    $scope.pagination_1 = function(){
      if($scope.pagina_max < $scope.usersFiltre.length){
        $scope.pagina_min+=10;
        $scope.pagina_max+=10;
      }
    }

    $scope.pagination_moins_1 = function(){
      if($scope.pagina_min !== 0){
        $scope.pagina_min-=10;
        $scope.pagina_max-=10;
      }
    }

    $scope.pagina_min = 0;
    $scope.pagina_max = 10;

    $scope.init = function() {
      Users.query({}, function(users) {
        $scope.users = users;
        $scope.users.forEach(function(user){
          if(user.livre_mag_revue){
            user.livre_mag_revue = new Date(user.livre_mag_revue).toISOString().substring(0, 10);
          }
          if(user.DVD){
            user.DVD = new Date(user.DVD).toISOString().substring(0, 10);
          }
          if(user.CD){
            user.CD = new Date(user.CD).toISOString().substring(0, 10);
          }
          if(user.caution){
            user.caution = new Date(user.caution).toISOString().substring(0, 10);
          }
          if(user.date_maj){
            user.date_maj = new Date(user.date_maj).toISOString().substring(0, 10);
          }
          if(user.paiement){
            user.paiement = new Date(user.paiement).toISOString().substring(0, 10);
          }
        });
        $scope.users_pagination = $scope.users.slice($scope.pagina_min, $scope.pagina_max);
        $scope.loader = false;
        $scope.page_max = Math.ceil(users.length/10);
      });
      //
    };

    $scope.add = function() {
      if (!$scope.users) $scope.users = [];

      var user = new Users({
        email: $scope.user.email,
        name: $scope.user.name,
        username: $scope.user.username,
        password: $scope.user.password,
        confirmPassword: $scope.user.confirmPassword
      });
      user.abonnement = [];
      user.roles = [];
      var today = new Date();
      var end = new Date();
      end.setFullYear(today.getFullYear()+1);
      for(var i in $scope.abo_select){

      }
      user.roles.push('authenticated');
      for(var i in $scope.role_select){
        user.roles.push(
         $scope.role_select[i].name
         );
      }

      user.$save(function(response) {
        $scope.users.push(response);
        message_info('Inscription réussi');
      }, function(err){
          if(err.data.errors && err.data.errors.hasOwnProperty('email')){
                message_info('Adresse mail déjà enregistrée', 'error');
          }else if(err.data.errors && err.data.errors.hasOwnProperty('username')){
                message_info('Username déjà enregistrée', 'error');
          }else if(err.data.errors && err.data.errors.hasOwnProperty('name')){
                message_info('Entrez votre nom', 'error');
          }else if(err.data[0]){
            message_info(err.data[0].msg, 'error');
          }
      });

      this.firstName = this.lastName = this.email = this.password = this.role = '';
    };

    $scope.remove = function(user) {
      for (var i in $scope.users) {
        if ($scope.users[i] === user) {
          $scope.users.splice(i, 1);
        }
      }

      user.$remove();
    };

    $scope.update = function(user, userField) {
      if (userField && userField === 'roles' && user.roles.indexOf('admin') === -1) {
        if (confirm('Are you sure you want to remove "admin" role?')) {
          user.$update();
        } else {
          user.roles = user.tmpRoles;
        }
      } else {
        user.$update(function(response){
          if(user.livre_mag_revue){
            user.livre_mag_revue = new Date(user.livre_mag_revue).toISOString().substring(0, 10);
          }
          if(user.DVD){
            user.DVD = new Date(user.DVD).toISOString().substring(0, 10);
          }
          if(user.CD){
            user.CD = new Date(user.CD).toISOString().substring(0, 10);
          }
          if(user.caution){
            user.caution = new Date(user.caution).toISOString().substring(0, 10);
          }
          if(user.paiement){
            user.paiement = new Date(user.paiement).toISOString().substring(0, 10);
          }
          if(user.date_maj){
            user.date_maj = new Date(user.date_maj).toISOString().substring(0, 10);
          }
          message_info('modification réussi');
        }, function(err){
          if(err.data.errors && err.data.errors.hasOwnProperty('email')){
            message_info('Adresse mail non renseigné impossible de faire la modification', 'error');
            console.log(err);
          }else if(err.data.errors && err.data.errors.hasOwnProperty('username')){
            message_info('Username non renseigné impossible de faire la modification', 'error');
            console.log(err);
          } else{
            message_info('Une erreur inconnue c\'est produite ...', 'error');
            console.log(err);
          }
        });
      }
    };

    $scope.beforeSelect = function(userField, user) {
      if (userField === 'roles') {
        user.tmpRoles = user.roles;
      }
    };

    $scope.validerNewAbo = function(user, newAbo, date_fin){
      console.log(user);
      if(newAbo === 'livre_mag_revue'){
        user.livre_mag_revue = date_fin;
      }else if(newAbo === 'DVD'){
        user.DVD = date_fin;
      }else if(newAbo === 'CD'){
        user.CD = date_fin;
      }else if(newAbo === 'caution'){
        user.caution = date_fin;
      }else if(newAbo === 'paiement'){
        user.paiement = date_fin;
      }
      // user.$update(function(response){
      //     message_info('Abonnement créé !');
      // });
    };

    function message_info(message, type){
      var res = {};
      res.message = message;
      if(type){
        res.status = type;
      }
      $scope.message_info = res;
    }
  }
]);